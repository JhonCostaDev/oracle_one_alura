#03 - Figma do projeto atualizado.
Alterações no projeto no figma que iremos implementar em nosso portifólio.

#04. posicionando links
Aprendemos que podemos utilizar o {display: flex} para posicionar elementos na tela, observando seu comportamento padrão.

 * Como alinhar 4 quadrados verticalmente dentro de uma <div>?

 ```css 
  <body>
        <div class="container">
            <div class="quadrado"></div>
            <div class="quadrado"></div>
            <div class="quadrado"></div>
            <div class="quadrado"></div>
        </div>
    </body>
````
    Para alinhar os 4 quadrados verticalmente, um embaixo do outro, você precisa definir a propriedade `flex-direction: column;` no CSS do elemento pai `.container`. Isso porque, por padrão, o `display: flex` alinha os elementos filhos horizontalmente. Ao definir `flex-direction: column;`, você está informando que a direção do eixo principal do layout flex deve ser vertical, fazendo com que os elementos filhos se alinhem um abaixo do outro. Dessa forma, você conseguirá organizar os 4 quadrados verticalmente, conforme o resultado desejado.

#05 Estilizando links 
    * Adicionando uma classe ao h2
    * Remover background dos botoes, alterando bordas dos       botoes, ajustes gerais nos botoes

    * Durante a aula, personalizamos a propriedade CSS chamada border, para adicionar a borda em volta dos botões. Essa propriedade pode ser usada para definir os valores de largura da borda, estilo da borda e cor da borda e possui alguns estilos diferentes, como o “dotted”, que conhecemos na aula através da documentacao (https://www.w3schools.com/css/css_border.asp).

    * Boas práticas ao comentar
    Os comentários podem ser muito úteis para facilitar o desenvolvimento, no entanto, precisamos ter atenção a algumas boas práticas para fazer seu uso adequado:

        * Evite adicionar muitos comentários para não gerar uma “bagunça” em seu código;
    
        * Evite criar comentários muito longos. Tenha em mente que apesar de não serem executados, esses comentários ocupam espaço e podem deixar seu arquivo mais pesado;
        * Use os comentários a seu favor, ou seja, anote informações essenciais neles, pois isso irá facilitar com que você encontre aquilo que é realmente necessário lembrar no momento de fazer manutenções em seu código;
        *Ao usar comentários para testar sua aplicação, lembre-se de apagar essas notas quando terminar, para que seu código não fique desorganizado e com partes desnecessárias;
        * Por fim, lembre-se sempre que um código descritivo é mais duradouro que muitos comentários. Quando estiver trabalhando com HTML, lembre-se de usar as Tags semânticas e ao criar suas classes CSS, adicione nomes significativos. Assim, seu código ficará naturalmente descritivo e não dependerá tanto dos comentários, que podem ser apagados ou se perderem ao longo de manutenções =) .    
    ## 08 Lista de exercícios

    1) Adicionando um subtítulo à página:
    Imagine que você está desenvolvendo uma página web para compartilhar suas redes sociais. Você precisa adicionar um subtítulo "Acesse minhas redes:" acima dos links para Instagram e Github. Sua tarefa é editar o arquivo index.html para incluir esse subtítulo. Lembre-se de usar a tag <h2> para o subtítulo e colocá-lo dentro da <div> que já contém os links.

    2) Alterando a disposição dos elementos com Flexbox
        Agora que o subtítulo foi adicionado, você percebe que ele está alinhado à esquerda dos botões, ao invés de acima deles. Isso aconteceu porque os elementos estão dispostos horizontalmente. Sua missão é alterar a disposição dos elementos (subtítulo e botões) para uma disposição vertical. Edite o arquivo style.css, modificando a propriedade flex-direction para column dentro da classe .apresentacao__links. Isso mudará a direção do Flexbox, alinhando os elementos verticalmente.

    3) Ajustando o alinhamento e o espaçamento dos elementos
        Após modificar a direção do Flexbox, você observa que os elementos (texto e botões) estão muito próximos uns dos outros e alinhados à esquerda. Para melhorar a estética da página, você precisa centralizar esses elementos verticalmente e adicionar um espaçamento entre eles. No arquivo style.css, dentro da classe .apresentacao__links, adicione a propriedade align-items: center para centralizar os elementos. Em seguida, insira a propriedade gap com o valor de 32px para adicionar o espaçamento entre cada elemento.

    4) Criando uma classe para o subtítulo
        Você está desenvolvendo uma página web e decidiu que o subtítulo "Acesse minhas redes:" precisa de uma estilização específica. Para isso, você vai criar uma classe CSS para este subtítulo. No arquivo index.html, encontre a tag <h2> que contém o subtítulo e adicione uma classe chamada apresentacao__links__subtitulo. Sua tarefa é inserir essa classe na tag <h2> de forma correta.

    5) Estilizando o subtítulo
        Agora que você criou uma classe para o subtítulo, é hora de estilizá-lo. No arquivo style.css, adicione a classe .apresentacao__links__subtitulo e configure as propriedades de estilo. Utilize a fonte 'Krona One', com um peso de fonte (font-weight) de 400 e um tamanho de fonte (font-size) de 24px. Ajuste a fonte para ser 'sans-serif' sem aspas. Sua tarefa é escrever o código CSS para aplicar essas configurações ao subtítulo.

    6) Modificando o estilo dos botões
        Os botões da sua página precisam de um novo visual. No arquivo style.css, encontre a classe .apresentacao__links__link e faça as seguintes alterações: remova o fundo ciano, mude a cor do texto para branco (#F6F6F6), adicione uma borda sólida de 2px na cor ciano (#22D4FD), altere a largura para 378px, e ajuste o border-radius para 8px. Sua tarefa é alterar o código CSS para refletir estas mudanças, criando botões com bordas ciano, texto branco, e cantos menos arredondados.

2 - Adicionando ícones das redes sociais.

    * Posicionando ícones
    * Efeito: Hover
    O hover é usado para selecionar elementos quando você passa o mouse sobre eles. Essa e outras informações úteis sobre o hover você pode encontrar na documentação =)
        ```css
        .apresentacao__links__link:hover {
        background-color: #272727;
        }
        ```

3 - criando header e footer

    * Footer: adicionado a classe rodape ao footer

    ```css
        .rodape{
            padding: 24px;
            color: #000000;
            background-color: #22D4FD;
            text-align: center;
            font-family: 'Montserrat', sans-serif;
            font-size: 24px;
            font-weight: 400;
        }
    ```
    * Header: Adicionado header a pagina
        Criado o header com a tag semâtica <nav> e dois links (home, about me)
    ```html
            <header class="cabecalho">
                 <nav class="cabecalho__menu">
                        <a href="" class="cabecalho__menu__link">Home</a>
                        <a href="" class="cabecalho__menu__link">About me</a>
                 </nav>
            </header>
    ``` 

    4 - Navegando entre páginas
    Criacao da pagina about me, linkano elas ao index.html

    desafio:

    Agora que você aprendeu a criar outras páginas com HTML, queremos te desafiar!

Crie mais uma página em seu projeto e construa nela o seu currículo.

Você pode seguir a estrutura dos currículos tradicionais, com suas informações no topo e sua estrutura dividida em seções, ou você pode soltar sua criatividade e fazer algo totalmente diferente, fica a seu critério.

É importante que nessa página currículo você adicione uma imagem sua e crie pelo menos uma lista HTML, que contenha suas experiências de trabalho ou estudos.

Além disso, pode ser interessante adicionar outros projetos caso você tenha.

Lembre-se: não tenha medo de personalizar esta página, afinal é o seu currículo e quanto mais tiver “a sua cara”, melhor.

Agora é sua vez de criar, topa o desafio?


# 5 Aplicando variáveis CSS 

```css
    :hover {
        --color-main:rgb(106, 13, 135);
}

# Exibit no nome da branch no terminal  
    https://warcontent.com/branch-git-no-terminal/

    Para isso adicione o seguinte código no final do arquivo .bashrc ou .bash_profile (ambos encontrados na home do usuário ~/):

    export PS1='\u@\h\[\033[01;34m\] \w\[\033[0;32m\]$(__git_ps1 " (%s)")\[\033[01;34m\]$\[\033[00m\] '

Utilizar variáveis em css para poder reutilizar partes do codigo que podem ser reaproveitadas.

Utilizando Roda de cores para mudar paleta de cores
 --> colorhunt.co

## saiba mais:
Trabalhando com variáveis CSS

As propriedades de customização CSS, mais conhecidas como variáveis CSS, podem ser muito úteis para deixar as atualizações de layout do projeto mais práticas. Pensando nisso, imagine que você criou uma variável para armazenar a cor que deseja aplicar no cabeçalho do seu projeto, como podemos observar no código a seguir:

```CSS 
    :root{
    cor-atualizada-do-projeto:  #eb94bd;
}
.cabecalho{
        background-color: black;
}
```
Nessa aula conhecemos as variáveis CSS e descobrimos seu potencial para customização do projeto.

Um atalho que pode facilitar muito o processo de alterar as cores em todo o código para atribuir em seu lugar a variável é o ctrl + D. Basta selecionar o que deseja mudar com o mouse e em seguida clicar em ctrl + D até que todos os valores que você deseja alterar estejam selecionados. Isso irá permitir mudar ao mesmo tempo todos os valores seguintes que sejam iguais ao que você selecionou com o mouse, como podemos observar no gif a seguir:


# PROJETOS PARA PRATICAR

https://cursos.alura.com.br/course/html-css-cabecalho-footer-variaveis-css/task/121128

https://youtu.be/y4ltLH9iK8E


{   TODO
    No debian anm, tentar colorir prompt
}
--> Curso de HTML e CSS: trabalhando com responsividade e publicação de projetos

# Unidades de medida

É muito importante utilizarmos as unidades de medidas relativas nos textos e títulos ou até mesmo nos elementos do nosso site, como por exemplo, as imagens.

Essa medida ajuda as pessoas com baixa visão que precisam alterar a aparência do navegador ou aplicar mais zoom para aumentar o tamanho dos elementos.

Lembrando que podemos diminuir o zoom da página também quando quisermos ter uma visão mais ampla dos elementos. Muito legal não é mesmo? :)

Esse artigo da Alura sobre unidades de medidas pode ajudar bastante o seu aprendizado: Artigo sobre unidade de medidas .
https://www.alura.com.br/artigos/guia-de-unidades-no-css

sobre unidade de medida porcentagem 
https://cursos.alura.com.br/course/html-css-responsividade-publicacao-projetos/task/121387

#

1) Adaptando imagens para diferentes tamanhos de tela
Você está trabalhando em um site e precisa garantir que as imagens se adaptem corretamente a diferentes tamanhos de tela. Sua tarefa é adicionar uma classe apresentacao__imagem às imagens relevantes no HTML e definir o width dessa classe para 50% no CSS. Isso fará com que as imagens ocupem 50% da largura do elemento pai. Certifique-se de testar em diferentes larguras de tela, como 720px, para verificar a responsividade.

2) Ajustando o layout para diferentes dispositivos
O layout do seu site precisa ser ajustado para diferentes dispositivos. Utilize a ferramenta "Inspecionar" do navegador para simular diferentes tamanhos de tela, como um notebook. Ajuste o layout da página para que ele se adapte de forma harmoniosa em telas menores. Isso pode envolver a alteração de margens, paddings, e até mesmo a reorganização de elementos na página.

3) Responsividade do conteúdo de texto
O conteúdo de texto do seu site não está se adaptando bem a telas menores. Você precisa ajustar a classe .apresentacao__conteudo no CSS para usar larguras relativas em vez de fixas. Experimente definir a width para 50% e observe como o texto se adapta quando você muda o tamanho da tela. Lembre-se de que a responsividade é chave para uma boa experiência do usuário em dispositivos diversos.

4) Melhorando a responsividade dos links de navegação
Os links de navegação do seu site estão se comportando de forma inadequada em diferentes tamanhos de tela. Sua tarefa é ajustar a classe .apresentacao__links__navegacao no CSS. Altere a width para um valor relativo, como 50%, e teste em diferentes tamanhos de tela. Observe como os links respondem a essas mudanças e ajuste conforme necessário para garantir uma navegação fluida e acessível.

# 
Sabia que você pode ter mais de uma media query em seu projeto? É possível definir um tamanho de tela para o celular outro para o tablet e deixar a “padrão” para o desktop.

Exemplo:

Podemos definir uma largura máxima de “480px” para o celular: @media (max-width: 480px), e em outra media query definir uma largura máxima de “800px” para os tablets: @media (max-width: 800px), e então atribuímos os ajustes necessários dentro de cada media query, dessa forma teremos nosso site 100% responsivo.

Podemos também definir intervalos para os tamanhos de telas com um único media query, atribuímos o valor mínimo e depois o valor máximo separando ele pelo atributo and, veja: @media (min-width: 480px ) and (max-width: 800px), nesse caso os estilos serão aplicados em telas de no mínimo “480px” e de no máximo “800px”.

Lembrando que a maioria dos acessos à internet hoje em dia é através dos dispositivos móveis, portanto, não se esqueça de sempre deixar os seus projetos e sites responsivos.

Para aprender mais, visite o site da Mozilla, e leia a documentação sobre media queries.